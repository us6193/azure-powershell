// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Billing.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Extensions;

    /// <summary>The renew properties for a reservation.</summary>
    public partial class RenewPropertiesResponse :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponse,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal
    {

        /// <summary>
        /// List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AppliedScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScope = value ?? null /* arrayOf */; }

        /// <summary>Display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopePropertyDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyDisplayName = value ?? null; }

        /// <summary>
        /// Fully-qualified identifier of the management group where the benefit must be applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopePropertyManagementGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyManagementGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyManagementGroupId = value ?? null; }

        /// <summary>Fully-qualified identifier of the resource group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopePropertyResourceGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyResourceGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyResourceGroupId = value ?? null; }

        /// <summary>Fully-qualified identifier of the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopePropertySubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertySubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertySubscriptionId = value ?? null; }

        /// <summary>Tenant ID where the reservation should apply benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopePropertyTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyTenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopePropertyTenantId = value ?? null; }

        /// <summary>Type of the Applied Scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AppliedScopeType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopeType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopeType = value ?? null; }

        /// <summary>Backing field for <see cref="BillingCurrencyTotal" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice _billingCurrencyTotal;

        /// <summary>
        /// Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice BillingCurrencyTotal { get => (this._billingCurrencyTotal = this._billingCurrencyTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Price()); set => this._billingCurrencyTotal = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public double? BillingCurrencyTotalAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)BillingCurrencyTotal).Amount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)BillingCurrencyTotal).Amount = value ?? default(double); }

        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingCurrencyTotalCurrencyCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)BillingCurrencyTotal).CurrencyCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)BillingCurrencyTotal).CurrencyCode = value ?? null; }

        /// <summary>Represent the billing plans.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingPlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).BillingPlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).BillingPlan = value ?? null; }

        /// <summary>Subscription that will be charged for purchasing reservation or savings plan</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingScopeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).BillingScopeId; }

        /// <summary>Friendly name of the reservation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).DisplayName = value ?? null; }

        /// <summary>Internal Acessors for AppliedScopeProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationAppliedScopeProperties Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.AppliedScopeProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopeProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).AppliedScopeProperty = value; }

        /// <summary>Internal Acessors for BillingCurrencyTotal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.BillingCurrencyTotal { get => (this._billingCurrencyTotal = this._billingCurrencyTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Price()); set { {_billingCurrencyTotal = value;} } }

        /// <summary>Internal Acessors for BillingScopeId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.BillingScopeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).BillingScopeId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).BillingScopeId = value; }

        /// <summary>Internal Acessors for PricingCurrencyTotal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.PricingCurrencyTotal { get => (this._pricingCurrencyTotal = this._pricingCurrencyTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Price()); set { {_pricingCurrencyTotal = value;} } }

        /// <summary>Internal Acessors for PurchaseProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequest Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.PurchaseProperty { get => (this._purchaseProperty = this._purchaseProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ReservationPurchaseRequest()); set { {_purchaseProperty = value;} } }

        /// <summary>Internal Acessors for PurchasePropertyProperties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestProperties Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.PurchasePropertyProperties { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Property; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Property = value; }

        /// <summary>Internal Acessors for PurchasePropertySku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ISkuName Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.PurchasePropertySku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Sku = value; }

        /// <summary>Internal Acessors for ReservedResourceProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestPropertiesReservedResourceProperties Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.ReservedResourceProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourceProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourceProperty = value; }

        /// <summary>Internal Acessors for ReservedResourceType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.ReservedResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourceType = value; }

        /// <summary>Internal Acessors for Term</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRenewPropertiesResponseInternal.Term { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Term; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Term = value; }

        /// <summary>Backing field for <see cref="PricingCurrencyTotal" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice _pricingCurrencyTotal;

        /// <summary>
        /// Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked
        /// price 30 days before expiry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice PricingCurrencyTotal { get => (this._pricingCurrencyTotal = this._pricingCurrencyTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Price()); set => this._pricingCurrencyTotal = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public double? PricingCurrencyTotalAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)PricingCurrencyTotal).Amount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)PricingCurrencyTotal).Amount = value ?? default(double); }

        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string PricingCurrencyTotalCurrencyCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)PricingCurrencyTotal).CurrencyCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPriceInternal)PricingCurrencyTotal).CurrencyCode = value ?? null; }

        /// <summary>Backing field for <see cref="PurchaseProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequest _purchaseProperty;

        /// <summary>The request for reservation purchase</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequest PurchaseProperty { get => (this._purchaseProperty = this._purchaseProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ReservationPurchaseRequest()); set => this._purchaseProperty = value; }

        /// <summary>The Azure region where the reserved resource lives.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string PurchasePropertyLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Location = value ?? null; }

        /// <summary>
        /// Quantity of the skus that are part of the reservation. Must be greater than zero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public int? Quantity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Quantity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Quantity = value ?? default(int); }

        /// <summary>
        /// Setting this to true will automatically purchase a new benefit on the expiration date time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public bool? Renew { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Renew; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Renew = value ?? default(bool); }

        /// <summary>
        /// Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines
        /// reserved resource type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ReservedResourcePropertyInstanceFlexibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourcePropertyInstanceFlexibility; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourcePropertyInstanceFlexibility = value ?? null; }

        /// <summary>The reserved source type of the reservation, e.g. virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ReservedResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReservedResourceType; }

        /// <summary>This is the date-time when the Azure hybrid benefit needs to be reviewed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? ReviewDateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReviewDateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).ReviewDateTime = value ?? default(global::System.DateTime); }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).SkuName = value ?? null; }

        /// <summary>The term of the reservation, e.g. P1Y</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string Term { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestInternal)PurchaseProperty).Term; }

        /// <summary>Creates an new <see cref="RenewPropertiesResponse" /> instance.</summary>
        public RenewPropertiesResponse()
        {

        }
    }
    /// The renew properties for a reservation.
    public partial interface IRenewPropertiesResponse :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IJsonSerializable
    {
        /// <summary>
        /// List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
        SerializedName = @"appliedScopes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AppliedScope { get; set; }
        /// <summary>Display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Display name",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string AppliedScopePropertyDisplayName { get; set; }
        /// <summary>
        /// Fully-qualified identifier of the management group where the benefit must be applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fully-qualified identifier of the management group where the benefit must be applied.",
        SerializedName = @"managementGroupId",
        PossibleTypes = new [] { typeof(string) })]
        string AppliedScopePropertyManagementGroupId { get; set; }
        /// <summary>Fully-qualified identifier of the resource group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fully-qualified identifier of the resource group.",
        SerializedName = @"resourceGroupId",
        PossibleTypes = new [] { typeof(string) })]
        string AppliedScopePropertyResourceGroupId { get; set; }
        /// <summary>Fully-qualified identifier of the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fully-qualified identifier of the subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string AppliedScopePropertySubscriptionId { get; set; }
        /// <summary>Tenant ID where the reservation should apply benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Tenant ID where the reservation should apply benefit.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string AppliedScopePropertyTenantId { get; set; }
        /// <summary>Type of the Applied Scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the Applied Scope.",
        SerializedName = @"appliedScopeType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Single", "Shared", "ManagementGroup")]
        string AppliedScopeType { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(double) })]
        double? BillingCurrencyTotalAmount { get; set; }
        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ISO 4217 3-letter currency code for the currency used by this purchase record.",
        SerializedName = @"currencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string BillingCurrencyTotalCurrencyCode { get; set; }
        /// <summary>Represent the billing plans.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Represent the billing plans.",
        SerializedName = @"billingPlan",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Upfront", "Monthly")]
        string BillingPlan { get; set; }
        /// <summary>Subscription that will be charged for purchasing reservation or savings plan</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Subscription that will be charged for purchasing reservation or savings plan",
        SerializedName = @"billingScopeId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingScopeId { get;  }
        /// <summary>Friendly name of the reservation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Friendly name of the reservation",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"amount",
        PossibleTypes = new [] { typeof(double) })]
        double? PricingCurrencyTotalAmount { get; set; }
        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ISO 4217 3-letter currency code for the currency used by this purchase record.",
        SerializedName = @"currencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string PricingCurrencyTotalCurrencyCode { get; set; }
        /// <summary>The Azure region where the reserved resource lives.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The Azure region where the reserved resource lives.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string PurchasePropertyLocation { get; set; }
        /// <summary>
        /// Quantity of the skus that are part of the reservation. Must be greater than zero.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Quantity of the skus that are part of the reservation. Must be greater than zero.",
        SerializedName = @"quantity",
        PossibleTypes = new [] { typeof(int) })]
        int? Quantity { get; set; }
        /// <summary>
        /// Setting this to true will automatically purchase a new benefit on the expiration date time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Setting this to true will automatically purchase a new benefit on the expiration date time.",
        SerializedName = @"renew",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Renew { get; set; }
        /// <summary>
        /// Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines
        /// reserved resource type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
        SerializedName = @"instanceFlexibility",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("On", "Off")]
        string ReservedResourcePropertyInstanceFlexibility { get; set; }
        /// <summary>The reserved source type of the reservation, e.g. virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The reserved source type of the reservation, e.g. virtual machine.",
        SerializedName = @"reservedResourceType",
        PossibleTypes = new [] { typeof(string) })]
        string ReservedResourceType { get;  }
        /// <summary>This is the date-time when the Azure hybrid benefit needs to be reviewed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This is the date-time when the Azure hybrid benefit needs to be reviewed.",
        SerializedName = @"reviewDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ReviewDateTime { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>The term of the reservation, e.g. P1Y</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The term of the reservation, e.g. P1Y",
        SerializedName = @"term",
        PossibleTypes = new [] { typeof(string) })]
        string Term { get;  }

    }
    /// The renew properties for a reservation.
    internal partial interface IRenewPropertiesResponseInternal

    {
        /// <summary>
        /// List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.
        /// </summary>
        System.Collections.Generic.List<string> AppliedScope { get; set; }
        /// <summary>
        /// Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId
        /// if AppliedScopeType is ManagementGroup
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationAppliedScopeProperties AppliedScopeProperty { get; set; }
        /// <summary>Display name</summary>
        string AppliedScopePropertyDisplayName { get; set; }
        /// <summary>
        /// Fully-qualified identifier of the management group where the benefit must be applied.
        /// </summary>
        string AppliedScopePropertyManagementGroupId { get; set; }
        /// <summary>Fully-qualified identifier of the resource group.</summary>
        string AppliedScopePropertyResourceGroupId { get; set; }
        /// <summary>Fully-qualified identifier of the subscription.</summary>
        string AppliedScopePropertySubscriptionId { get; set; }
        /// <summary>Tenant ID where the reservation should apply benefit.</summary>
        string AppliedScopePropertyTenantId { get; set; }
        /// <summary>Type of the Applied Scope.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Single", "Shared", "ManagementGroup")]
        string AppliedScopeType { get; set; }
        /// <summary>
        /// Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice BillingCurrencyTotal { get; set; }

        double? BillingCurrencyTotalAmount { get; set; }
        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        string BillingCurrencyTotalCurrencyCode { get; set; }
        /// <summary>Represent the billing plans.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Upfront", "Monthly")]
        string BillingPlan { get; set; }
        /// <summary>Subscription that will be charged for purchasing reservation or savings plan</summary>
        string BillingScopeId { get; set; }
        /// <summary>Friendly name of the reservation</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked
        /// price 30 days before expiry.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IPrice PricingCurrencyTotal { get; set; }

        double? PricingCurrencyTotalAmount { get; set; }
        /// <summary>
        /// The ISO 4217 3-letter currency code for the currency used by this purchase record.
        /// </summary>
        string PricingCurrencyTotalCurrencyCode { get; set; }
        /// <summary>The request for reservation purchase</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequest PurchaseProperty { get; set; }
        /// <summary>The Azure region where the reserved resource lives.</summary>
        string PurchasePropertyLocation { get; set; }
        /// <summary>Properties of reservation purchase request</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestProperties PurchasePropertyProperties { get; set; }
        /// <summary>The name of sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ISkuName PurchasePropertySku { get; set; }
        /// <summary>
        /// Quantity of the skus that are part of the reservation. Must be greater than zero.
        /// </summary>
        int? Quantity { get; set; }
        /// <summary>
        /// Setting this to true will automatically purchase a new benefit on the expiration date time.
        /// </summary>
        bool? Renew { get; set; }
        /// <summary>
        /// Properties specific to each reserved resource type. Not required if not applicable.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IReservationPurchaseRequestPropertiesReservedResourceProperties ReservedResourceProperty { get; set; }
        /// <summary>
        /// Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines
        /// reserved resource type.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("On", "Off")]
        string ReservedResourcePropertyInstanceFlexibility { get; set; }
        /// <summary>The reserved source type of the reservation, e.g. virtual machine.</summary>
        string ReservedResourceType { get; set; }
        /// <summary>This is the date-time when the Azure hybrid benefit needs to be reviewed.</summary>
        global::System.DateTime? ReviewDateTime { get; set; }

        string SkuName { get; set; }
        /// <summary>The term of the reservation, e.g. P1Y</summary>
        string Term { get; set; }

    }
}