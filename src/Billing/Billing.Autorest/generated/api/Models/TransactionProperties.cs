// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Billing.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Extensions;

    /// <summary>A transaction.</summary>
    public partial class TransactionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AzureCreditApplied" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesAzureCreditApplied _azureCreditApplied;

        /// <summary>The amount of any Azure credits automatically applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesAzureCreditApplied AzureCreditApplied { get => (this._azureCreditApplied = this._azureCreditApplied ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesAzureCreditApplied()); set => this._azureCreditApplied = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AzureCreditAppliedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Value; }

        /// <summary>Backing field for <see cref="AzurePlan" /> property.</summary>
        private string _azurePlan;

        /// <summary>Details of the Azure plan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string AzurePlan { get => this._azurePlan; set => this._azurePlan = value; }

        /// <summary>Backing field for <see cref="BillingCurrency" /> property.</summary>
        private string _billingCurrency;

        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string BillingCurrency { get => this._billingCurrency; set => this._billingCurrency = value; }

        /// <summary>Backing field for <see cref="BillingProfileDisplayName" /> property.</summary>
        private string _billingProfileDisplayName;

        /// <summary>The name of the billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string BillingProfileDisplayName { get => this._billingProfileDisplayName; set => this._billingProfileDisplayName = value; }

        /// <summary>Backing field for <see cref="BillingProfileId" /> property.</summary>
        private string _billingProfileId;

        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string BillingProfileId { get => this._billingProfileId; set => this._billingProfileId = value; }

        /// <summary>Backing field for <see cref="ConsumptionCommitmentDecremented" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesConsumptionCommitmentDecremented _consumptionCommitmentDecremented;

        /// <summary>
        /// The amount of Microsoft Azure Consumption Commitment(MACC) decrement through the transaction.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesConsumptionCommitmentDecremented ConsumptionCommitmentDecremented { get => (this._consumptionCommitmentDecremented = this._consumptionCommitmentDecremented ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesConsumptionCommitmentDecremented()); set => this._consumptionCommitmentDecremented = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ConsumptionCommitmentDecrementedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? ConsumptionCommitmentDecrementedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Value; }

        /// <summary>Backing field for <see cref="CreditType" /> property.</summary>
        private string _creditType;

        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string CreditType { get => this._creditType; set => this._creditType = value; }

        /// <summary>Backing field for <see cref="CustomerDisplayName" /> property.</summary>
        private string _customerDisplayName;

        /// <summary>The name of the customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string CustomerDisplayName { get => this._customerDisplayName; set => this._customerDisplayName = value; }

        /// <summary>Backing field for <see cref="CustomerId" /> property.</summary>
        private string _customerId;

        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string CustomerId { get => this._customerId; set => this._customerId = value; }

        /// <summary>Backing field for <see cref="Date" /> property.</summary>
        private global::System.DateTime? _date;

        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public global::System.DateTime? Date { get => this._date; set => this._date = value; }

        /// <summary>Backing field for <see cref="Discount" /> property.</summary>
        private float? _discount;

        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public float? Discount { get => this._discount; set => this._discount = value; }

        /// <summary>Backing field for <see cref="EffectivePrice" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesEffectivePrice _effectivePrice;

        /// <summary>The price of the product after applying any discounts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesEffectivePrice EffectivePrice { get => (this._effectivePrice = this._effectivePrice ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesEffectivePrice()); set => this._effectivePrice = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? EffectivePriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Value; }

        /// <summary>Backing field for <see cref="ExchangeRate" /> property.</summary>
        private float? _exchangeRate;

        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public float? ExchangeRate { get => this._exchangeRate; set => this._exchangeRate = value; }

        /// <summary>Backing field for <see cref="Invoice" /> property.</summary>
        private string _invoice;

        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string Invoice { get => this._invoice; set => this._invoice = value; }

        /// <summary>Backing field for <see cref="InvoiceId" /> property.</summary>
        private string _invoiceId;

        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string InvoiceId { get => this._invoiceId; set => this._invoiceId = value; }

        /// <summary>Backing field for <see cref="InvoiceSectionDisplayName" /> property.</summary>
        private string _invoiceSectionDisplayName;

        /// <summary>The name of the invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string InvoiceSectionDisplayName { get => this._invoiceSectionDisplayName; set => this._invoiceSectionDisplayName = value; }

        /// <summary>Backing field for <see cref="InvoiceSectionId" /> property.</summary>
        private string _invoiceSectionId;

        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string InvoiceSectionId { get => this._invoiceSectionId; set => this._invoiceSectionId = value; }

        /// <summary>Backing field for <see cref="IsThirdParty" /> property.</summary>
        private bool? _isThirdParty;

        /// <summary>Whether or not the transaction is third party.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public bool? IsThirdParty { get => this._isThirdParty; set => this._isThirdParty = value; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private string _kind;

        /// <summary>Type of the transaction, billed or unbilled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Backing field for <see cref="MarketPrice" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesMarketPrice _marketPrice;

        /// <summary>The retail price of the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesMarketPrice MarketPrice { get => (this._marketPrice = this._marketPrice ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesMarketPrice()); set => this._marketPrice = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? MarketPriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Value; }

        /// <summary>Internal Acessors for AzureCreditApplied</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesAzureCreditApplied Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.AzureCreditApplied { get => (this._azureCreditApplied = this._azureCreditApplied ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesAzureCreditApplied()); set { {_azureCreditApplied = value;} } }

        /// <summary>Internal Acessors for AzureCreditAppliedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Currency = value; }

        /// <summary>Internal Acessors for AzureCreditAppliedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.AzureCreditAppliedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)AzureCreditApplied).Value = value; }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecremented</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesConsumptionCommitmentDecremented Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.ConsumptionCommitmentDecremented { get => (this._consumptionCommitmentDecremented = this._consumptionCommitmentDecremented ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesConsumptionCommitmentDecremented()); set { {_consumptionCommitmentDecremented = value;} } }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecrementedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.ConsumptionCommitmentDecrementedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Currency = value; }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecrementedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.ConsumptionCommitmentDecrementedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)ConsumptionCommitmentDecremented).Value = value; }

        /// <summary>Internal Acessors for EffectivePrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesEffectivePrice Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.EffectivePrice { get => (this._effectivePrice = this._effectivePrice ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesEffectivePrice()); set { {_effectivePrice = value;} } }

        /// <summary>Internal Acessors for EffectivePriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Currency = value; }

        /// <summary>Internal Acessors for EffectivePriceValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.EffectivePriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)EffectivePrice).Value = value; }

        /// <summary>Internal Acessors for MarketPrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesMarketPrice Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.MarketPrice { get => (this._marketPrice = this._marketPrice ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesMarketPrice()); set { {_marketPrice = value;} } }

        /// <summary>Internal Acessors for MarketPriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Currency = value; }

        /// <summary>Internal Acessors for MarketPriceValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.MarketPriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)MarketPrice).Value = value; }

        /// <summary>Internal Acessors for RefundTransactionDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesRefundTransactionDetails Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetail { get => (this._refundTransactionDetail = this._refundTransactionDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesRefundTransactionDetails()); set { {_refundTransactionDetail = value;} } }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRefunded</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsAmountRefunded Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRefunded { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefunded; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefunded = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRefundedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRefundedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedCurrency = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRefundedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRefundedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedValue = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRequested</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsAmountRequested Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRequested { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequested; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequested = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRequestedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRequestedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedCurrency = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRequestedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.RefundTransactionDetailAmountRequestedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedValue = value; }

        /// <summary>Internal Acessors for SubTotal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesSubTotal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.SubTotal { get => (this._subTotal = this._subTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesSubTotal()); set { {_subTotal = value;} } }

        /// <summary>Internal Acessors for SubTotalCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Currency = value; }

        /// <summary>Internal Acessors for SubTotalValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.SubTotalValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Value = value; }

        /// <summary>Internal Acessors for Tax</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTax Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.Tax { get => (this._tax = this._tax ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesTax()); set { {_tax = value;} } }

        /// <summary>Internal Acessors for TaxCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Currency = value; }

        /// <summary>Internal Acessors for TaxValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.TaxValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Value = value; }

        /// <summary>Internal Acessors for TransactionAmount</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTransactionAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.TransactionAmount { get => (this._transactionAmount = this._transactionAmount ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesTransactionAmount()); set { {_transactionAmount = value;} } }

        /// <summary>Internal Acessors for TransactionAmountCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.TransactionAmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Currency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Currency = value; }

        /// <summary>Internal Acessors for TransactionAmountValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesInternal.TransactionAmountValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Value = value; }

        /// <summary>Backing field for <see cref="PartNumber" /> property.</summary>
        private string _partNumber;

        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string PartNumber { get => this._partNumber; set => this._partNumber = value; }

        /// <summary>Backing field for <see cref="PricingCurrency" /> property.</summary>
        private string _pricingCurrency;

        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string PricingCurrency { get => this._pricingCurrency; set => this._pricingCurrency = value; }

        /// <summary>Backing field for <see cref="ProductDescription" /> property.</summary>
        private string _productDescription;

        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string ProductDescription { get => this._productDescription; set => this._productDescription = value; }

        /// <summary>Backing field for <see cref="ProductFamily" /> property.</summary>
        private string _productFamily;

        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string ProductFamily { get => this._productFamily; set => this._productFamily = value; }

        /// <summary>Backing field for <see cref="ProductType" /> property.</summary>
        private string _productType;

        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string ProductType { get => this._productType; set => this._productType = value; }

        /// <summary>Backing field for <see cref="ProductTypeId" /> property.</summary>
        private string _productTypeId;

        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string ProductTypeId { get => this._productTypeId; set => this._productTypeId = value; }

        /// <summary>Backing field for <see cref="Quantity" /> property.</summary>
        private int? _quantity;

        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public int? Quantity { get => this._quantity; set => this._quantity = value; }

        /// <summary>Backing field for <see cref="ReasonCode" /> property.</summary>
        private string _reasonCode;

        /// <summary>There reason code for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string ReasonCode { get => this._reasonCode; set => this._reasonCode = value; }

        /// <summary>Backing field for <see cref="RefundTransactionDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesRefundTransactionDetails _refundTransactionDetail;

        /// <summary>The refund details of a transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesRefundTransactionDetails RefundTransactionDetail { get => (this._refundTransactionDetail = this._refundTransactionDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesRefundTransactionDetails()); set => this._refundTransactionDetail = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string RefundTransactionDetailAmountRefundedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? RefundTransactionDetailAmountRefundedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRefundedValue; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string RefundTransactionDetailAmountRequestedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? RefundTransactionDetailAmountRequestedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).AmountRequestedValue; }

        /// <summary>The ID of refund operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string RefundTransactionDetailRefundOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).RefundOperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsInternal)RefundTransactionDetail).RefundOperationId = value ?? null; }

        /// <summary>Backing field for <see cref="ServicePeriodEndDate" /> property.</summary>
        private global::System.DateTime? _servicePeriodEndDate;

        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public global::System.DateTime? ServicePeriodEndDate { get => this._servicePeriodEndDate; set => this._servicePeriodEndDate = value; }

        /// <summary>Backing field for <see cref="ServicePeriodStartDate" /> property.</summary>
        private global::System.DateTime? _servicePeriodStartDate;

        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public global::System.DateTime? ServicePeriodStartDate { get => this._servicePeriodStartDate; set => this._servicePeriodStartDate = value; }

        /// <summary>Backing field for <see cref="SpecialTaxationType" /> property.</summary>
        private string _specialTaxationType;

        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string SpecialTaxationType { get => this._specialTaxationType; set => this._specialTaxationType = value; }

        /// <summary>Backing field for <see cref="SubTotal" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesSubTotal _subTotal;

        /// <summary>The pre-tax charged amount for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesSubTotal SubTotal { get => (this._subTotal = this._subTotal ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesSubTotal()); set => this._subTotal = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? SubTotalValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)SubTotal).Value; }

        /// <summary>Backing field for <see cref="Tax" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTax _tax;

        /// <summary>The tax amount applied to the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTax Tax { get => (this._tax = this._tax ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesTax()); set => this._tax = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? TaxValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)Tax).Value; }

        /// <summary>Backing field for <see cref="TransactionAmount" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTransactionAmount _transactionAmount;

        /// <summary>The charge associated with the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTransactionAmount TransactionAmount { get => (this._transactionAmount = this._transactionAmount ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.TransactionPropertiesTransactionAmount()); set => this._transactionAmount = value; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string TransactionAmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Currency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? TransactionAmountValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IAmountInternal)TransactionAmount).Value; }

        /// <summary>Backing field for <see cref="TransactionType" /> property.</summary>
        private string _transactionType;

        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string TransactionType { get => this._transactionType; set => this._transactionType = value; }

        /// <summary>Backing field for <see cref="Unit" /> property.</summary>
        private float? _unit;

        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public float? Unit { get => this._unit; set => this._unit = value; }

        /// <summary>Backing field for <see cref="UnitOfMeasure" /> property.</summary>
        private string _unitOfMeasure;

        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string UnitOfMeasure { get => this._unitOfMeasure; set => this._unitOfMeasure = value; }

        /// <summary>Backing field for <see cref="UnitType" /> property.</summary>
        private string _unitType;

        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        public string UnitType { get => this._unitType; set => this._unitType = value; }

        /// <summary>Creates an new <see cref="TransactionProperties" /> instance.</summary>
        public TransactionProperties()
        {

        }
    }
    /// A transaction.
    public partial interface ITransactionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IJsonSerializable
    {
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AzureCreditAppliedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AzureCreditAppliedValue { get;  }
        /// <summary>Details of the Azure plan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Details of the Azure plan.",
        SerializedName = @"azurePlan",
        PossibleTypes = new [] { typeof(string) })]
        string AzurePlan { get; set; }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ISO 4217 code for the currency in which this transaction is billed.",
        SerializedName = @"billingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string BillingCurrency { get; set; }
        /// <summary>The name of the billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the billing profile.",
        SerializedName = @"billingProfileDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The fully qualified ID that uniquely identifies a billing profile.",
        SerializedName = @"billingProfileId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileId { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string ConsumptionCommitmentDecrementedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? ConsumptionCommitmentDecrementedValue { get;  }
        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The credit type of the transaction. Applies only to credited transactions.",
        SerializedName = @"creditType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Other", "AzureFreeCredit", "AzureCreditOffer", "ServiceInterruption", "Refund")]
        string CreditType { get; set; }
        /// <summary>The name of the customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the customer.",
        SerializedName = @"customerDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The fully qualified ID that uniquely identifies a customer.",
        SerializedName = @"customerId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerId { get; set; }
        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The date of transaction.",
        SerializedName = @"date",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Date { get; set; }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The percentage discount, if any, applied to this transaction.",
        SerializedName = @"discount",
        PossibleTypes = new [] { typeof(float) })]
        float? Discount { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string EffectivePriceCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? EffectivePriceValue { get;  }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The exchange rate used to convert charged amount to billing currency, if applicable.",
        SerializedName = @"exchangeRate",
        PossibleTypes = new [] { typeof(float) })]
        float? ExchangeRate { get; set; }
        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.",
        SerializedName = @"invoice",
        PossibleTypes = new [] { typeof(string) })]
        string Invoice { get; set; }
        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.",
        SerializedName = @"invoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceId { get; set; }
        /// <summary>The name of the invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the invoice section.",
        SerializedName = @"invoiceSectionDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The fully qualified ID that uniquely identifies an invoice section.",
        SerializedName = @"invoiceSectionId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionId { get; set; }
        /// <summary>Whether or not the transaction is third party.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether or not the transaction is third party.",
        SerializedName = @"isThirdParty",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsThirdParty { get; set; }
        /// <summary>Type of the transaction, billed or unbilled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the transaction, billed or unbilled.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Other", "All", "Reservation")]
        string Kind { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string MarketPriceCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? MarketPriceValue { get;  }
        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement invoices.",
        SerializedName = @"partNumber",
        PossibleTypes = new [] { typeof(string) })]
        string PartNumber { get; set; }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ISO 4217 code for the currency in which the product is priced.",
        SerializedName = @"pricingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string PricingCurrency { get; set; }
        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The description of the product for which the transaction took place.",
        SerializedName = @"productDescription",
        PossibleTypes = new [] { typeof(string) })]
        string ProductDescription { get; set; }
        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The family of the product for which the transaction took place.",
        SerializedName = @"productFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ProductFamily { get; set; }
        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the product for which the transaction took place.",
        SerializedName = @"productType",
        PossibleTypes = new [] { typeof(string) })]
        string ProductType { get; set; }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the product type for which the transaction took place.",
        SerializedName = @"productTypeId",
        PossibleTypes = new [] { typeof(string) })]
        string ProductTypeId { get; set; }
        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The quantity purchased in the transaction.",
        SerializedName = @"quantity",
        PossibleTypes = new [] { typeof(int) })]
        int? Quantity { get; set; }
        /// <summary>There reason code for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"There reason code for the transaction.",
        SerializedName = @"reasonCode",
        PossibleTypes = new [] { typeof(string) })]
        string ReasonCode { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string RefundTransactionDetailAmountRefundedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? RefundTransactionDetailAmountRefundedValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string RefundTransactionDetailAmountRequestedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? RefundTransactionDetailAmountRequestedValue { get;  }
        /// <summary>The ID of refund operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of refund operation.",
        SerializedName = @"refundOperationId",
        PossibleTypes = new [] { typeof(string) })]
        string RefundTransactionDetailRefundOperationId { get; set; }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The end date of the product term, or the end date of the month in which usage ended.",
        SerializedName = @"servicePeriodEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The date of the purchase of the product, or the start date of the month in which usage started.",
        SerializedName = @"servicePeriodStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax calculation logic.",
        SerializedName = @"specialTaxationType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("SubtotalLevel", "InvoiceLevel")]
        string SpecialTaxationType { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string SubTotalCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? SubTotalValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string TaxCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? TaxValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string TransactionAmountCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? TransactionAmountValue { get;  }
        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of transaction.",
        SerializedName = @"transactionType",
        PossibleTypes = new [] { typeof(string) })]
        string TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of units used for a given product.",
        SerializedName = @"units",
        PossibleTypes = new [] { typeof(float) })]
        float? Unit { get; set; }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The unit of measure used to bill for the product. For example, compute services are billed per hour.",
        SerializedName = @"unitOfMeasure",
        PossibleTypes = new [] { typeof(string) })]
        string UnitOfMeasure { get; set; }
        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The description for the unit of measure for a given product.",
        SerializedName = @"unitType",
        PossibleTypes = new [] { typeof(string) })]
        string UnitType { get; set; }

    }
    /// A transaction.
    internal partial interface ITransactionPropertiesInternal

    {
        /// <summary>The amount of any Azure credits automatically applied to this transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesAzureCreditApplied AzureCreditApplied { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AzureCreditAppliedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? AzureCreditAppliedValue { get; set; }
        /// <summary>Details of the Azure plan.</summary>
        string AzurePlan { get; set; }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        string BillingCurrency { get; set; }
        /// <summary>The name of the billing profile.</summary>
        string BillingProfileDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        string BillingProfileId { get; set; }
        /// <summary>
        /// The amount of Microsoft Azure Consumption Commitment(MACC) decrement through the transaction.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesConsumptionCommitmentDecremented ConsumptionCommitmentDecremented { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string ConsumptionCommitmentDecrementedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? ConsumptionCommitmentDecrementedValue { get; set; }
        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Other", "AzureFreeCredit", "AzureCreditOffer", "ServiceInterruption", "Refund")]
        string CreditType { get; set; }
        /// <summary>The name of the customer.</summary>
        string CustomerDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        string CustomerId { get; set; }
        /// <summary>The date of transaction.</summary>
        global::System.DateTime? Date { get; set; }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        float? Discount { get; set; }
        /// <summary>The price of the product after applying any discounts.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesEffectivePrice EffectivePrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string EffectivePriceCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? EffectivePriceValue { get; set; }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        float? ExchangeRate { get; set; }
        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        string Invoice { get; set; }
        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        string InvoiceId { get; set; }
        /// <summary>The name of the invoice section.</summary>
        string InvoiceSectionDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        string InvoiceSectionId { get; set; }
        /// <summary>Whether or not the transaction is third party.</summary>
        bool? IsThirdParty { get; set; }
        /// <summary>Type of the transaction, billed or unbilled.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("Other", "All", "Reservation")]
        string Kind { get; set; }
        /// <summary>The retail price of the product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesMarketPrice MarketPrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string MarketPriceCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? MarketPriceValue { get; set; }
        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        string PartNumber { get; set; }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        string PricingCurrency { get; set; }
        /// <summary>The description of the product for which the transaction took place.</summary>
        string ProductDescription { get; set; }
        /// <summary>The family of the product for which the transaction took place.</summary>
        string ProductFamily { get; set; }
        /// <summary>The type of the product for which the transaction took place.</summary>
        string ProductType { get; set; }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        string ProductTypeId { get; set; }
        /// <summary>The quantity purchased in the transaction.</summary>
        int? Quantity { get; set; }
        /// <summary>There reason code for the transaction.</summary>
        string ReasonCode { get; set; }
        /// <summary>The refund details of a transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesRefundTransactionDetails RefundTransactionDetail { get; set; }
        /// <summary>The amount refunded.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsAmountRefunded RefundTransactionDetailAmountRefunded { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string RefundTransactionDetailAmountRefundedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? RefundTransactionDetailAmountRefundedValue { get; set; }
        /// <summary>The amount of refund requested.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IRefundTransactionDetailsAmountRequested RefundTransactionDetailAmountRequested { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string RefundTransactionDetailAmountRequestedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? RefundTransactionDetailAmountRequestedValue { get; set; }
        /// <summary>The ID of refund operation.</summary>
        string RefundTransactionDetailRefundOperationId { get; set; }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Billing.PSArgumentCompleterAttribute("SubtotalLevel", "InvoiceLevel")]
        string SpecialTaxationType { get; set; }
        /// <summary>The pre-tax charged amount for the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesSubTotal SubTotal { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string SubTotalCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? SubTotalValue { get; set; }
        /// <summary>The tax amount applied to the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTax Tax { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string TaxCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? TaxValue { get; set; }
        /// <summary>The charge associated with the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.ITransactionPropertiesTransactionAmount TransactionAmount { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string TransactionAmountCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? TransactionAmountValue { get; set; }
        /// <summary>The type of transaction.</summary>
        string TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        float? Unit { get; set; }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        string UnitOfMeasure { get; set; }
        /// <summary>The description for the unit of measure for a given product.</summary>
        string UnitType { get; set; }

    }
}